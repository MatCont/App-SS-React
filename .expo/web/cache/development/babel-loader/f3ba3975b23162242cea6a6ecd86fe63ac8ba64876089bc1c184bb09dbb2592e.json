{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport dataEstablecimientos from \"./dataEstablecimientos\";\nimport { Picker } from '@react-native-picker/picker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar EstablecimientosScreen = function EstablecimientosScreen() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedEstablecimiento = _useState2[0],\n    setSelectedEstablecimiento = _useState2[1];\n  var handleEstablecimientoChange = function handleEstablecimientoChange(value) {\n    var establecimiento = dataEstablecimientos.find(function (est) {\n      return est.idComuna === value;\n    });\n    setSelectedEstablecimiento(establecimiento);\n  };\n  return _jsxs(View, {\n    children: [_jsxs(Picker, {\n      selectedValue: selectedEstablecimiento ? selectedEstablecimiento.idComuna : null,\n      onValueChange: function onValueChange(value) {\n        return handleEstablecimientoChange(value);\n      },\n      children: [_jsx(Picker.Item, {\n        label: \"Selecciona un establecimiento\",\n        value: null\n      }), \" \", dataEstablecimientos.map(function (establecimiento, index) {\n        return _jsx(Picker.Item, {\n          label: establecimiento.nombre,\n          value: establecimiento.idComuna\n        }, index);\n      })]\n    }), selectedEstablecimiento && _jsxs(View, {\n      children: [_jsx(Text, {\n        children: \"Establecimiento seleccionado:\"\n      }), _jsxs(Text, {\n        children: [\"ID Comuna: \", selectedEstablecimiento.idComuna]\n      }), _jsxs(Text, {\n        children: [\"ID Tipo: \", selectedEstablecimiento.idTipo]\n      }), _jsxs(Text, {\n        children: [\"Nombre: \", selectedEstablecimiento.nombre]\n      })]\n    })]\n  });\n};\nexport default EstablecimientosScreen;","map":{"version":3,"names":["React","useState","View","Text","dataEstablecimientos","Picker","jsx","_jsx","jsxs","_jsxs","EstablecimientosScreen","_useState","_useState2","_slicedToArray","selectedEstablecimiento","setSelectedEstablecimiento","handleEstablecimientoChange","value","establecimiento","find","est","idComuna","children","selectedValue","onValueChange","Item","label","map","index","nombre","idTipo"],"sources":["C:/Users/NTK_17/Desktop/Tesis/proyecto-react-js/src/consts/EstablecimientosScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text } from 'react-native'; // Importa Picker de react-native\r\nimport dataEstablecimientos from './dataEstablecimientos'; // Importa el arreglo de datos\r\nimport { Picker } from '@react-native-picker/picker';\r\n\r\nconst EstablecimientosScreen = () => {\r\n  const [selectedEstablecimiento, setSelectedEstablecimiento] = useState(null); // Estado para almacenar el establecimiento seleccionado\r\n\r\n  const handleEstablecimientoChange = (value) => {\r\n    const establecimiento = dataEstablecimientos.find((est) => est.idComuna === value); // Encuentra el establecimiento en el arreglo de datos basado en el valor seleccionado del Picker\r\n    setSelectedEstablecimiento(establecimiento); // Actualiza el estado con el establecimiento seleccionado\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <Picker\r\n        selectedValue={selectedEstablecimiento ? selectedEstablecimiento.idComuna : null} // Establece el valor seleccionado del Picker basado en el estado selectedEstablecimiento\r\n        onValueChange={(value) => handleEstablecimientoChange(value)} // Llama a la función handleEstablecimientoChange al cambiar la selección del Picker\r\n      >\r\n        <Picker.Item label=\"Selecciona un establecimiento\" value={null} /> {/* Opción predeterminada */}\r\n        {dataEstablecimientos.map((establecimiento, index) => (\r\n          <Picker.Item\r\n            key={index}\r\n            label={establecimiento.nombre}\r\n            value={establecimiento.idComuna} // Usa el idComuna como valor del Picker\r\n          />\r\n        ))}\r\n      </Picker>\r\n      {selectedEstablecimiento && (\r\n        <View>\r\n          <Text>Establecimiento seleccionado:</Text>\r\n          <Text>ID Comuna: {selectedEstablecimiento.idComuna}</Text>\r\n          <Text>ID Tipo: {selectedEstablecimiento.idTipo}</Text>\r\n          <Text>Nombre: {selectedEstablecimiento.nombre}</Text>\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default EstablecimientosScreen;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAExC,OAAOC,oBAAoB;AAC3B,SAASC,MAAM,QAAQ,6BAA6B;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAErD,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAA,EAAS;EACnC,IAAAC,SAAA,GAA8DV,QAAQ,CAAC,IAAI,CAAC;IAAAW,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArEG,uBAAuB,GAAAF,UAAA;IAAEG,0BAA0B,GAAAH,UAAA;EAE1D,IAAMI,2BAA2B,GAAG,SAA9BA,2BAA2BA,CAAIC,KAAK,EAAK;IAC7C,IAAMC,eAAe,GAAGd,oBAAoB,CAACe,IAAI,CAAC,UAACC,GAAG;MAAA,OAAKA,GAAG,CAACC,QAAQ,KAAKJ,KAAK;IAAA,EAAC;IAClFF,0BAA0B,CAACG,eAAe,CAAC;EAC7C,CAAC;EAED,OACET,KAAA,CAACP,IAAI;IAAAoB,QAAA,GACHb,KAAA,CAACJ,MAAM;MACLkB,aAAa,EAAET,uBAAuB,GAAGA,uBAAuB,CAACO,QAAQ,GAAG,IAAK;MACjFG,aAAa,EAAE,SAAAA,cAACP,KAAK;QAAA,OAAKD,2BAA2B,CAACC,KAAK,CAAC;MAAA,CAAC;MAAAK,QAAA,GAE7Df,IAAA,CAACF,MAAM,CAACoB,IAAI;QAACC,KAAK,EAAC,+BAA+B;QAACT,KAAK,EAAE;MAAK,EAAG,KAAC,EAClEb,oBAAoB,CAACuB,GAAG,CAAC,UAACT,eAAe,EAAEU,KAAK;QAAA,OAC/CrB,IAAA,CAACF,MAAM,CAACoB,IAAI;UAEVC,KAAK,EAAER,eAAe,CAACW,MAAO;UAC9BZ,KAAK,EAAEC,eAAe,CAACG;QAAS,GAF3BO,KAAK,CAGV;MAAA,CACH,CAAC;IAAA,EACK,EACRd,uBAAuB,IACtBL,KAAA,CAACP,IAAI;MAAAoB,QAAA,GACHf,IAAA,CAACJ,IAAI;QAAAmB,QAAA,EAAC;MAA6B,EAAO,EAC1Cb,KAAA,CAACN,IAAI;QAAAmB,QAAA,GAAC,aAAW,EAACR,uBAAuB,CAACO,QAAQ;MAAA,EAAQ,EAC1DZ,KAAA,CAACN,IAAI;QAAAmB,QAAA,GAAC,WAAS,EAACR,uBAAuB,CAACgB,MAAM;MAAA,EAAQ,EACtDrB,KAAA,CAACN,IAAI;QAAAmB,QAAA,GAAC,UAAQ,EAACR,uBAAuB,CAACe,MAAM;MAAA,EAAQ;IAAA,EAExD;EAAA,EACI;AAEX,CAAC;AAED,eAAenB,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}